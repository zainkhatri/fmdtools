#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
{{ spec.name }} level model.

{% if spec.description %}{{ spec.description }}{% endif %}

Generated by fmdtools CLI
"""

from .architecture import {{ arch_class_name }}
import fmdtools.sim.propagate as prop


class {{ class_name }}({{ arch_class_name }}):
    """{{ spec.name }} main model class."""
    
    __slots__ = ()
    
    def find_classification(self, scen, mdlhists):
        """Define classification criteria for fault scenarios."""
        # TODO: Implement custom classification logic
        # Example: return {'rate': 1.0, 'cost': 100, 'expected_cost': 100}
        return {'rate': 1.0, 'cost': 0, 'expected_cost': 0}
    

# Export the main model class
MODEL_CLASS = {{ class_name }}


def run_nominal_sim(model, end_time=100):
    """Run a nominal simulation."""
    try:
        result, mdlhist = prop.nominal(model, end_time=end_time)
        return result, mdlhist
    except TypeError:
        # Handle different propagate signatures
        mdlhist = prop.nominal(model, end_time=end_time)
        return {"time": end_time}, mdlhist


def run_fault_sim(model, fault_scenarios=None):
    """Run fault simulation scenarios."""
    if fault_scenarios is None:
        fault_scenarios = model.get_fault_scenarios()
    
    results = {}
    for scenario in fault_scenarios:
        try:
            result, mdlhist = prop.one_fault(model, scenario, end_time=100)
            results[scenario] = (result, mdlhist)
        except Exception as e:
            print(f"Failed to run scenario {scenario}: {e}")
    
    return results


if __name__ == "__main__":
    """Example usage and testing."""
    
    print(f"{{ spec.name }} Model")
    print("=" * 40)
    
    # Create model
    model = {{ class_name }}(track='all')
    print(f"Model created with {len(model.functions)} functions")
    
    {% if spec.simulation.sample_run %}
    # Run nominal simulation
    print("\nRunning nominal simulation...")
    try:
        result, mdlhist = run_nominal_sim(model)
        print(f"Nominal simulation completed")
        print(f"   Final time: {result.get('time', 'unknown')}")
    except Exception as e:
        print(f"Nominal simulation failed: {e}")
    {% endif %}
    
    {% if spec.simulation.fault_analysis %}
    # Run fault analysis
    print("\nRunning fault analysis...")
    try:
        fault_results = run_fault_sim(model)
        print(f"Tested {len(fault_results)} fault scenarios")
    except Exception as e:
        print(f"Fault analysis failed: {e}")
    {% endif %}
    
    print(f"\n{{ spec.name }} model is ready!")
    print("You can now import and use this model in your simulations.")